SQLActions[] = {
  "BEGIN INSTALL
      /* this has no implementation in the Java source
      CREATE FUNCTION invariantproperties.numerator(invariantproperties.rational) RETURNS int8
          AS 'com.invariantproperties.udt.sql.RationalUDT.numerator'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */
      
      /* this has no implementation in the Java source
      CREATE FUNCTION invariantproperties.denominator(invariantproperties.rational) RETURNS int8
          AS 'com.invariantproperties.udt.sql.RationalUDT.denominator'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */

      /* this has no implementation in the Java source
      CREATE FUNCTION invariantproperties.rational_ne(invariantproperties.rational, float8) RETURNS bool
          AS 'com.invariantproperties.udt.sql.RationalUDT.notEquals'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */

      /* this has no implementation in the Java source
      CREATE OPERATOR <> (
         leftarg = invariantproperties.rational, rightarg = float8, procedure = invariantproperties.rational_ne,
         commutator = <> , negator = == 
      );
      */

    CREATE OPERATOR CLASS rational_ops
      DEFAULT FOR TYPE invariantproperties.rational USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       == ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       invariantproperties.rational_cmp(invariantproperties.rational, invariantproperties.rational);
    
    /* ------------------------------------------------------------------------------- */
      
      /* this has no implementation in the Java source
      CREATE FUNCTION invariantproperties.re(invariantproperties.complex) RETURNS float8
          AS 'com.invariantproperties.udt.sql.ComplexUDT.numerator'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */
      
      /* this has no implementation in the Java source
      CREATE FUNCTION invariantproperties.im(invariantproperties.complex) RETURNS float8
          AS 'com.invariantproperties.udt.sql.ComplexUDT.denominator'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */
          
      /* this has no implementation in the Java source
      CREATE FUNCTION invariantproperties.complex_divide(invariantproperties.complex, invariantproperties.complex) RETURNS invariantproperties.complex
          AS 'com.invariantproperties.udt.sql.ComplexUDT.divide'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */
         
      /* this return type differs from what is in the Java source
      CREATE FUNCTION invariantproperties.abs(invariantproperties.complex) RETURNS float8
          AS 'com.invariantproperties.udt.sql.ComplexUDT.abs'
          LANGUAGE JAVA IMMUTABLE STRICT;
      */

      /* this has no implementation in the Java source
      CREATE OPERATOR / (
         leftarg = invariantproperties.complex, rightarg = invariantproperties.complex, procedure = invariantproperties.complex_divide
      );
      */

   END INSTALL",

   "BEGIN REMOVE
    /* DROP OPERATOR / ( invariantproperties.complex, invariantproperties.complex ); */
    /*
    DROP FUNCTION invariantproperties.abs(invariantproperties.complex);
    DROP FUNCTION invariantproperties.complex_divide(invariantproperties.complex, invariantproperties.complex);
    DROP FUNCTION invariantproperties.im(invariantproperties.complex);
    DROP FUNCTION invariantproperties.re(invariantproperties.complex);
    */
    DROP OPERATOR FAMILY rational_ops USING btree;
    /* DROP OPERATOR <> ( invariantproperties.rational, float8 ); */
    /* DROP FUNCTION invariantproperties.rational_ne(invariantproperties.rational, float8); */
    /*
    DROP FUNCTION invariantproperties.denominator(invariantproperties.rational);
    DROP FUNCTION invariantproperties.numerator(invariantproperties.rational);
    */
   END REMOVE"
}
